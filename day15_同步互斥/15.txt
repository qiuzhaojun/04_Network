前情回顾

1. 线程
   多任务编程
   运行过程   占有资源   共享进程资源
   一个进程可包含多个线程
   线程的创建比较容易

2. 创建线程
   Thread()  start()  join()

   属性   自定义线程类

3. 同步互斥

   Event() e.set() e.wait() e.clear()

   Lock()  lock.acquire()   lock.release()

   作用： 控制多个线程对共享资源的有序使用

   缺点 ： 影响效率， 会产生死锁

4. GIL ： 全局解释器锁

   后果 ： Python的多线程效率低

   使用情况建议：没阻塞时用进程
               高阻塞时才考虑线程

FTP 文件服务

需求 ：
    * 分为服务端和客户端，要求可以有多个客户端同时操作。
    * 客户端可以查看服务器文件库中有什么文件。
    * 客户端可以从文件库中下载文件到本地。
    * 客户端可以上传一个本地文件到文件库。
    * 使用print在客户端打印命令输入提示，引导操作

    1. 文件库可能为空，此时看不了文件库
    2. 要下载的文件不存在
    3. 上传时文件库有同名的文件

技术点 ：

    网络： tcp
    并发模型 ：　　多进程　　多线程　并发

功能划分和封装：　类封装

    框架搭建　：　函数

　　查看文件库内容
　　下载文件
　　上传文件


协议设计　：　
       　请求类型　　　数据参量
  查看　　 LIST

  上传    STOR       filename

  下载    RETR       filename

  退出    EXIT

  服务端反馈约定 ：   OK
                   FAIL


具体功能模块设计：　

  框架搭建   服务端 ： thread_server.py
                     总分模型

            客户端 ： 学生管理系统

  查看文件库内容
          客户端 ： 1. 发起请求
                   2. 等待服务端反馈结果
                   3. Yes -> 接收文件列表
                      No -> 结束

          服务端 ： 1. 接收请求
                   2. 判断请求是否可以完成
                      将反馈结果发送给客户端
                   3. Yes 发送文件列表
                      No  结束

  上传文件
         客户端 ： 发送请求
                  等待反馈
                  Yes  上传文件
                  No   结束

         服务端 ： 接收请求
                  判断文件是否已存在
                  发送反馈
                  Yes 接收文件
                  No  结束

　下载文件

  退出

作业： 1. 重点代码自己写一遍
      2. 文件服务程序  获取文件列表，下载文件

         请求应答的结构







