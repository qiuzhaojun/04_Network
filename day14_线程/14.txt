前情回顾

1. 进程池 （应对大量的源源不断产生的进程事件）

   Pool()
   apply_async()
   close()
   join()

2. 消息队列--》 进程间通信

   Queue()
   q.put()
   q.get()

群聊聊天室

需求分析

* 有人进入聊天室需要输入姓名，姓名不能重复
* 有人进入聊天室时，其他人会收到通知：xxx 进入了聊天室
* 一个人发消息，其他人会收到：xxx ： xxxxxxxxxxx
* 有人退出聊天室，则其他人也会收到通知:xxx退出了聊天室

技术分析  c/s

存储人员信息： 服务端
   存什么 ： 名字  地址
   怎么存 ： {name:address}
            [(name,address),...]
            class Person:
                def __init__(self,name,address):
                   self.name = name
                   self.address = address

消息的网络传递 : udp
    消息发送：转发的方法   客户端-》服务端-》客户端
    收发消息: 多进程，一个负责发送，一个负责接收


功能模块划分 封装方法 ： 函数封装

    框架模型

    进入聊天室

    聊天

    退出聊天室


网络协议设置

           请求类型     数据参量
    进入     LOGIN      name

    聊天     CHAT    name   说话的内容

    退出     EXIT


功能模块逻辑具体分析

    框架模型
        服务端 ： 1. 创建udp网络服务端
                 2. 循环接收各种客户端请求
                 3. 根据请求做出调用

        客户端 ： 1. 创建udp网络

    进入聊天室
        客户端 ： 1. 输入姓名
                 2. 发送给服务端
                 3. 接收服务端反馈
                 4. Y 进入聊天 N 回到第一步

        服务端 ： 1. 接收请求
                 2. 判断是否有这个姓名
                 3. 根据判断发送结果
                     Y -》存储用户 告知其他人
                     N -》over

    聊天
       客户端 ：1. 创建子进程
               2. 父进程循环发送消息
                  子进程循环接收消息

       服务端 ： 1. 接收请求
                2. 将消息转发给其他人


    退出聊天室
       客户端 1. 输入exit 表示退出
             2. 发送请求

       服务端 1. 接收请求
             2. 告知其他人
             3. 删除该用户


优化完善


练习：模拟一个售票系统程序
一共500张票 ---》T1---T500

编程10个线程模拟10个售票窗口机器 记为 W1-W10
10个窗口同时售票知道所有票都卖出为止

票按照顺序出售
每个窗口卖出一张后   w2----T346
卖出一张需要0.1s


练习2： 创建两个线程同时执行
一个线程负责打印 1---52   52个数字
另一个线程打印 A--Z  26个字母
要求打印结果为 12A34B.....5152Z

作业：
1. 进程线程使用方法 总结 熟练
2. 进程线程对比
3. 聊天室  自己写








